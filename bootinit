#!/bin/sh

# Ensure this script runs as PID 1
if [ "$$" -ne 1 ]; then
    printf "\x1b[31mYou cannot initialize a running system.\x1b[0m\n"
    exit 1
fi

# Define status indicators without relying on echo -e
SYSTEMD_OK="[  \x1b[32mOK  \x1b[0m]"
SYSTEMD_FAIL="[\x1b[31mFAILED\x1b[0m]"

# Mount essential filesystems
printf '         Mounting filesystems...\n'
mount -t proc none /proc && printf '%b Mounted proc filesystem\n' "$SYSTEMD_OK"
mount -t sysfs none /sys && printf '%b Mounted sysfs filesystem\n' "$SYSTEMD_OK"
mount -t devtmpfs none /dev && printf '%b Mounted devtmpfs filesystem\n' "$SYSTEMD_OK"

# Populate devices needed for system startup
printf '         Populating devices...\n'
if mdev -s; then
    printf '\r%b Populated devices\n' "$SYSTEMD_OK"
else
    printf '\r%b Failed to populate devices\n' "$SYSTEMD_FAIL"
fi

# Stop pollution of printk output
printf '         Configuring kernel printk...\n'
if echo "1 1 1 1" > /proc/sys/kernel/printk; then
    printf '%b Configured kernel printk\n' "$SYSTEMD_OK"
else
    printf '%b Failed to configure kernel printk\n' "$SYSTEMD_FAIL"
fi


# Create working paths for system startup
printf '         Creating working directories...\n'
if mkdir -p /mnt/newroot; then
    printf '%b Created working directories\n' "$SYSTEMD_OK"
else
    printf '%b Failed to create working directories\n' "$SYSTEMD_FAIL"
fi

# Set up the writable environment
mount_filesystems() {
	rootfs=$(grep -o '\broot=[^ ]*' /proc/cmdline | sed 's/^root=//')
	
    printf '         Mounting root filesystem...\n'
    if ! mount "$rootfs" /mnt/newroot; then
        printf '%b Failed to mount "%s" on root filesystem\n' "$SYSTEMD_FAIL" "$rootfs"
        umount -Rl /mnt/newroot >/dev/null 2>&1
        return 1
    fi
    printf '%b Mounted root filesystem\n' "$SYSTEMD_OK"
    
    return 0
}

# Instead of kernel panic, go to an emergency shell
recovery_shell() {
    printf 'Dropping to emergency shell\n'
    printf 'Fix errors and type "exit" or press <CTRL+D> to retry boot.\n'
    
    sh
}

# Init task that repeats on failure
sysinit() {
    if grep -q "recovery=true" /proc/cmdline; then
        printf 'Requested emergency shell\n'
        printf 'Type "exit" or press <CTRL+D> to continue startup.\n'
        sh
    fi
    
    while true; do
        if mount_filesystems; then        
            umount -Rl /proc /sys /dev >/dev/null 2>&1
            if [ -f /mnt/newroot/sbin/init ]; then
                exec switch_root /mnt/newroot /sbin/init
            else
                printf '%b No init found in filesystem\n' "$SYSTEMD_FAIL"
            fi
        else
            recovery_shell
        fi
    done
}

# Initialize the system
sysinit
